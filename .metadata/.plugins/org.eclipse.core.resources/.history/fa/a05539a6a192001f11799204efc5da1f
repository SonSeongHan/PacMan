package pacman;

public class Map {
    private char[][] board;
    private int pacmanX, pacmanY;
    private int[] ghostX = new int[3]; // 3마리 유령의 X좌표
    private int[] ghostY = new int[3]; // 3마리 유령의 Y좌표
    private int itemX, itemY;
    private int starX, starY;

    public Map() {
        board = new char[10][15]; // 15x15 맵
        initializeBoard();
        pacmanX = 1;
        pacmanY = 1;
        itemX = 5; // 동전 위치
        itemY = 5; // 동전 위치
        starX = 7;
        starY = 7;

        // 유령의 시작 위치 설정 (정중앙에 가두기)
        ghostX[0] = 7; ghostY[0] = 6; // 유령 1
        ghostX[1] = 7; ghostY[1] = 7; // 유령 2
        ghostX[2] = 6; ghostY[2] = 7; // 유령 3
    }

    private void initializeBoard() {
        // 모든 위치에 동전 배치
        for (int i = 0; i < board.length; i++) {
            for (int j = 0; j < board[i].length; j++) {
                board[i][j] = 'o'; // 동전
            }
        }

        // 벽 추가 (미로 형태)
        for (int i = 0; i < board.length; i++) {
            board[i][0] = '#'; // 좌측 벽
            board[i][14] = '#'; // 우측 벽
        }
        for (int j = 0; j < board[0].length; j++) {
            board[0][j] = '#'; // 상단 벽
            board[board.length - 1][j] = '#'; // 하단 벽
        }

        // 미로 형태의 추가 벽
        board[2][2] = '#';
        board[2][3] = '#';
        board[2][4] = '#';
        board[3][2] = '#';
        board[3][5] = '#';
        board[4][5] = '#';
        board[5][4] = '#';
        board[5][3] = '#';
        board[6][1] = '#';
        board[6][2] = '#';
        board[6][3] = '#';
        board[6][5] = '#';
        board[7][2] = '#';
        board[8][1] = '#';
        board[8][3] = '#';
        board[8][4] = '#';
        board[9][5] = '#';
        board[9][6] = '#';

        // 유령을 가두기 위한 벽
        
    }

    public void display() {
        board[pacmanY][pacmanX] = 'P'; // 팩맨 위치
        for (int i = 0; i < 3; i++) {
            board[ghostY[i]][ghostX[i]] = 'G'; // 유령 위치
        }
        board[starY][starX] = '*'; // 별 위치

        for (char[] row : board) {
            System.out.print(new String(row) + "\n");
        }

        // 원래 위치로 되돌리기
        board[pacmanY][pacmanX] = 'o';
        for (int i = 0; i < 3; i++) {
            board[ghostY[i]][ghostX[i]] = ' ';
        }
        board[starY][starX] = ' ';
    }

    public void movePacman(int x, int y) {
        if (board[pacmanY + y][pacmanX + x] != '#') {
            pacmanX += x;
            pacmanY += y;
        }
    }

    public void moveGhost(int x, int y) {
        if (board[ghostY[0] + y][ghostX[0] + x] != '#') {
            ghostX[0] += x;
            ghostY[0] += y;
        }
        // 나머지 유령의 이동 로직 추가 가능
    }

    public boolean isGameOver() {
        for (int i = 0; i < 3; i++) {
            if (pacmanX == ghostX[i] && pacmanY == ghostY[i]) {
                return true; // 충돌 시 게임 종료
            }
        }
        return false;
    }

    public int[] getPacmanPosition() {
        return new int[]{pacmanX, pacmanY};
    }

    public int[][] getGhostPositions() {
        int[][] positions = new int[3][2];
        for (int i = 0; i < 3; i++) {
            positions[i][0] = ghostX[i];
            positions[i][1] = ghostY[i];
        }
        return positions;
    }

    public int[] getItemPosition() {
        return new int[]{itemX, itemY};
    }

    public int[] getStarPosition() {
        return new int[]{starX, starY};
    }

    public void moveItem() {
        itemX = (int) (Math.random() * (board.length - 2)) + 1;
        itemY = (int) (Math.random() * (board[0].length - 2)) + 1;
    }

    public void moveStar() {
        starX = (int) (Math.random() * (board.length - 2)) + 1;
        starY = (int) (Math.random() * (board[0].length - 2)) + 1;
    }
}
