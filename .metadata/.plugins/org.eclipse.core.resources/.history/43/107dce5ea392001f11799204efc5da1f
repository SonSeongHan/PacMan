package pacman;

public class Map {
    private char[][] board;
    private int pacmanX, pacmanY;
    private int[] ghostX = new int[3]; // 3마리 유령의 X좌표
    private int[] ghostY = new int[3]; // 3마리 유령의 Y좌표
    private int itemX, itemY;
    private Star star; // Star 객체 추가

    public int getBoardWidth() {
        return board[0].length;
    }

    public int getBoardHeight() {
        return board.length;
    }

    public boolean isCellEmpty(int x, int y) {
        return board[y][x] != '#' && !(x == pacmanX && y == pacmanY);
    }

    public Map() {
        board = new char[10][15]; // 10x15 맵
        initializeBoard();
        pacmanX = 1;
        pacmanY = 1;
        itemX = 5; // 동전 위치
        itemY = 5; // 동전 위치

        // 유령의 시작 위치 설정 (정중앙에 가두기)
        ghostX[0] = 6; ghostY[0] = 5; // 유령 1
        ghostX[1] = 6; ghostY[1] = 6; // 유령 2
        ghostX[2] = 6; ghostY[2] = 7; // 유령 3

        star = new Star(this); // Star 객체 생성
    }

    private void initializeBoard() {
        // 모든 위치에 동전 배치
        for (int i = 0; i < board.length; i++) {
            for (int j = 0; j < board[i].length; j++) {
                board[i][j] = 'o'; // 동전
            }
        }

        // 벽 추가 (미로 형태)
        for (int i = 0; i < board.length; i++) {
            board[i][0] = '#'; // 좌측 벽
            board[i][14] = '#'; // 우측 벽
        }
        for (int j = 0; j < board[0].length; j++) {
            board[0][j] = '#'; // 상단 벽
            board[board.length - 1][j] = '#'; // 하단 벽
        }

        // 유령을 가두기 위한 벽
        board[5][5] = '#';
        board[5][6] = '#';
        board[5][7] = '#';
        board[6][5] = '#';
        board[6][6] = '#'; // 중앙에 벽
        board[6][7] = '#';
        board[7][5] = '#';
        board[7][6] = '#';
        board[7][7] = '#';
    }

    public void display() {
        board[pacmanY][pacmanX] = 'P'; // 팩맨 위치
        for (int i = 0; i < 3; i++) {
            board[ghostY[i]][ghostX[i]] = 'G'; // 유령 위치
        }

        // 별 위치 표시
        for (int[] starPos : star.getStarPositions()) {
            board[starPos[1]][starPos[0]] = '*'; // 별 표시
        }

        for (char[] row : board) {
            System.out.print(new String(row) + "\n");
        }

        // 원래 위치로 되돌리기
        board[pacmanY][pacmanX] = 'o';
        for (int i = 0; i < 3; i++) {
            board[ghostY[i]][ghostX[i]] = ' ';
        }
    }
    
    public void moveItem() {
        int newX, newY;
        do {
            newX = (int) (Math.random() * (board[0].length - 2)) + 1; // 벽을 제외한 범위
            newY = (int) (Math.random() * (board.length - 2)) + 1;
        } while (!isCellEmpty(newX, newY)); // 빈 위치를 찾을 때까지 반복
        itemX = newX;
        itemY = newY;
    }


    public void movePacman(int x, int y) {
        if (board[pacmanY + y][pacmanX + x] != '#') {
            pacmanX += x;
            pacmanY += y;
        }
    }

    public void moveGhost(int index, int x, int y) {
        if (board[ghostY[index] + y][ghostX[index] + x] != '#') {
            ghostX[index] += x;
            ghostY[index] += y;
        }
    }

    public boolean isGameOver() {
        for (int i = 0; i < 3; i++) {
            if (pacmanX == ghostX[i] && pacmanY == ghostY[i]) {
                return true; // 충돌 시 게임 종료
            }
        }
        return false;
    }

    public int[] getPacmanPosition() {
        return new int[]{pacmanX, pacmanY};
    }

    public int[][] getGhostPositions() {
        int[][] positions = new int[3][2];
        for (int i = 0; i < 3; i++) {
            positions[i][0] = ghostX[i];
            positions[i][1] = ghostY[i];
        }
        return positions;
    }

    public int[] getItemPosition() {
        return new int[]{itemX, itemY};
    }

    public int[][] getStarPositions() {
        return star.getStarPositions();
    }
}
